import numpy as np
from astropy.table import Table
from astropy.io import fits
from enum import IntEnum, auto

class phE_file:
    """
    Handles phox data files generated with unit 1
    containing photon energies of each package.
    -----
    Class for energy package file with typical naming
    convention: 'foo_E_bar.dat'
    """
    def __init__(self, phox_file: str) -> None:
        with open(phox_file,"rb") as f:
            self.e_min       = float(np.fromfile(f,np.float64,count=1)   ) # [keV]
            self.e_max       = float(np.fromfile(f,np.float64,count=1)   ) # [keV]
            self.n_chan      = int(  np.fromfile(f,np.int32,count=1)     ) # energy bins
            self.temp_min    = float(np.fromfile(f,np.float32,count=1)   ) # [K]
            self.delta_temp  = float(np.fromfile(f,np.float32,count=1)   ) # [K]
            self.area        = float(np.fromfile(f,np.float64,count=1)   ) # [cm^2]
            self.time        = float(np.fromfile(f,np.float64,count=1)   ) # [s]
            self.Da          = float(np.fromfile(f,np.float64,count=1)   ) # [cm]
            self.zz          = float(np.fromfile(f,np.float64,count=1)   ) 
            self.zz_obs      = float(np.fromfile(f,np.float64,count=1)   ) 
            self.om0M        = float(np.fromfile(f,np.float64,count=1)   ) 
            self.om0L        = float(np.fromfile(f,np.float64,count=1)   ) 
            self.h0          = float(np.fromfile(f,np.float64,count=1)   ) 
            self.nph         = int(np.fromfile(f,np.ulonglong,count=1)   )
            self.active_part = int(np.fromfile(f,np.ulonglong,count=1)   )
            self.ph_per_part = np.fromfile(f,np.int32,count=self.active_part)
            self.phE         = np.fromfile(f,np.float32,count=self.nph)

class phX_file:
    """
    Handles phox data files generated with unit 1
    containing parent particle data for each photon
    package.
    -----
    Class for position package file with typical naming
    convention: 'foo_X_bar.dat'
    """
    def __init__(self, phox_file: str) -> None:
        with open(phox_file,"rb") as f:
            self.e_min       = float(np.fromfile(f,np.float64,count=1)   ) # [keV]
            self.e_max       = float(np.fromfile(f,np.float64,count=1)   ) # [keV]
            self.n_chan      = int(  np.fromfile(f,np.int32,count=1)     ) # energy bins
            self.temp_min    = float(np.fromfile(f,np.float32,count=1)   ) # [K]
            self.delta_temp  = float(np.fromfile(f,np.float32,count=1)   ) # [K]
            self.area        = float(np.fromfile(f,np.float64,count=1)   ) # [cm^2]
            self.time        = float(np.fromfile(f,np.float64,count=1)   ) # [s]
            self.Da          = float(np.fromfile(f,np.float64,count=1)   ) # [cm]
            self.zz          = float(np.fromfile(f,np.float64,count=1)   ) 
            self.zz_obs      = float(np.fromfile(f,np.float64,count=1)   ) 
            self.om0M        = float(np.fromfile(f,np.float64,count=1)   ) 
            self.om0L        = float(np.fromfile(f,np.float64,count=1)   ) 
            self.h0          = float(np.fromfile(f,np.float64,count=1)   ) 
            self.nph         = int(np.fromfile(f,np.ulonglong,count=1)   )
            self.active_part = int(np.fromfile(f,np.ulonglong,count=1)   )
            self.x           = np.fromfile(f,np.float32,count=self.active_part)
            self.y           = np.fromfile(f,np.float32,count=self.active_part)
            self.z           = np.fromfile(f,np.float32,count=self.active_part)
            self.vx          = np.fromfile(f,np.float32,count=self.active_part)
            self.vy          = np.fromfile(f,np.float32,count=self.active_part)
            self.vz          = np.fromfile(f,np.float32,count=self.active_part)
            self.hsml        = np.fromfile(f,np.float32,count=self.active_part)
            self.rho         = np.fromfile(f,np.float32,count=self.active_part)
            self.temp        = np.fromfile(f,np.float32,count=self.active_part)

class FITSfmt(IntEnum):
    """
    Set constants indicating the format
    of the fits file used in other functions
    """
    GENERIC_U2 = auto()
    SIMPUT_U2 = auto()
    XISSIM_U2 = auto()
    GENERIC_U3 = auto()


class read_fits:
    """
    Wrapper function calling functions appropriate
    for the specified fits format generated by PHOX
    unit 2. Differences are in column naming and hdu
    placement.
    -----
    FITSinp:    input file path
    fmt:        format type of input. If not specified,
                try to infer from extension and column
                naming
    """
    
    def __init__(self, FITSinp: str, fmt: int = None) -> None:
        self.phE = np.zeros(3)
        self.posx = np.zeros(3)
        self.posy = np.zeros(3)
        self.posz = np.zeros(3)

        if fmt == FITSfmt.GENERIC_U2:
            self.read_fitsU2(self, FITSinp)
        elif fmt == FITSfmt.SIMPUT_U2:
            self.read_fitsU2_simp(self, FITSinp)
        elif fmt == FITSfmt.XISSIM_U2:
            self.read_fitsU2_xissim(self, FITSinp)
        elif fmt == FITSfmt.GENERIC_U3:
            self.read_fitsU3(self, FITSinp)
        else:
            try:
                with fits.open(FITSinp) as hdul:
                    if hdul[1].name == "PHOTON_LIST":
                        if "PHOTON_TIME" in hdul[1].colnames:
                            self.read_fitsU2_xissim
                        elif hdul[1].colnames[0] == "PHOTON_ENERGY":
                            self.read_fitsU2(self, FITSinp)                        
                    elif hdul[2].name == "PHLIST":
                        self.read_fitsU2_simp(self, FITSinp)
                    elif hdul[1].colnames[0] == "EE":
                        self.read_fitsU3(self, FITSinp)
                    else:
                        raise ValueError(f"[{self.__name__}] No matching format/column names found in {FITSinp}!")
            except:
                print(f"Could not locate {FITSinp}, skipping...")


    def read_fitsU2(self, inp: str):
        """
        Read standard PHOX unit 2 output (mode = 0) with
        extsn: 'PHOTON_LIST' (hdu=1)
        column names: ['PHOTON_ENERGY','POS_X','POS_Y','POS_Z']
        """
        try:
            tbl = Table.read(inp)
            self.phE = np.asarray(tbl["PHOTON_ENERGY"])
            self.posx = np.asarray(tbl["POS_X"])
            self.posy = np.asarray(tbl["POS_Y"])
            self.posz = np.asarray(tbl["POS_Z"])
        except FileNotFoundError:
            print(f"Could not locate {inp}, skipping...")


    def read_fitsU2_xissim(self, inp: str):
        """
        Read standard PHOX unit 2 output (mode = 0) with
        extsn: 'PHOTON_LIST' (hdu=1)
        column names: ['PHOTON_TIME','PHOTON_ENERGY','RA','DEC']
        """
        try:
            tbl = Table.read(inp)
            self.phE = np.asarray(tbl["PHOTON_ENERGY"])
            self.posx = np.asarray(tbl["RA"])
            self.posy = np.asarray(tbl["DEC"])
            # self.posz = np.asarray(tbl["POS_Z"])
        except FileNotFoundError:
            print(f"Could not locate {inp}, skipping...")
            
        

    def read_fitsU2_simp(self, inp: str):
        """
        Read simput output from PHOX unit 2 (mode = 2)
        extsn: 'PHLIST' (hdu=2)
        column names: ['ENERGY','RA','DEC']
        """
        try:
            tbl = Table.read(inp)
            self.phE = np.asarray(tbl["ENERGY"])
            self.posx = np.asarray(tbl["RA"])
            self.posy = np.asarray(tbl["DEC"])
            # self.posz = np.asarray(tbl["POS_Z"])
        except FileNotFoundError:
            print(f"Could not locate {inp}, skipping...")


    def read_fitsU3(self, inp: str):
        """
        Read standard PHOX unit 3 output (mode = 0) with
        extsn: '' (hdu=1)
        column names: ['EE','XX','YY','ZZ']
        """
        try:
            tbl = Table.read(inp)
            self.phE = np.asarray(tbl["EE"])
            self.posx = np.asarray(tbl["XX"])
            self.posy = np.asarray(tbl["YY"])
            self.posz = np.asarray(tbl["ZZ"])
        except FileNotFoundError:
            print(f"Could not locate {inp}, skipping...")
